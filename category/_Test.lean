import Mathlib.CategoryTheory.Adjunction.Basic

-- namespace category

-- Basic
--  Functor ProductCat Transformation Hom Adjunction
--  EpiMono Iso

-- class Monoid extends Category where
--   obj := Unit

-- instance Mon : Category where
--   obj := Monoid
--   hom M N := M.toCategory ‚•§ N.toCategory
--   id M := ùüô[Cat] M.toCategory
--   comp g f := Cat.comp g f

-- instance NAT : Monoid where
--   hom _ _ := Nat
--   id _ := 0
--   comp x y := x + y
--   assoc := Nat.add_assoc
namespace CategoryTheory

open Category Functor
namespace Adjunction
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
variable {F : C ‚•§ D} {G : D ‚•§ C} (adj : CoreHomEquiv F G) {X' X : C} {Y Y' : D}

theorem homEquiv_naturality_left' (f : X' ‚ü∂ X) (g : F.obj X ‚ü∂ Y) :
    (adj.homEquiv X' Y) (F.map f ‚â´ g) = f ‚â´ (adj.homEquiv X Y) g := by
  rw [‚Üê Equiv.eq_symm_apply]
  simp only [CoreHomEquiv.homEquiv_naturality_left_symm]
  simp only [Equiv.symm_apply_apply]
