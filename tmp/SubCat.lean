import Mathlib.CategoryTheory.NatTrans
import Mathlib.CategoryTheory.Limits.Shapes.Products

namespace CategoryTheory

class SubCatStruct (cat : Category.{v, u} C) : Type (max u v) where
  obj : C ‚Üí Prop
  Hom {X Y} : obj X ‚Üí obj Y ‚Üí (X ‚ü∂ Y) ‚Üí Prop
  id {X} (h : obj X) : Hom h h (ùüô X)
  comp : ‚àÄ {X Y Z} {hX : obj X} {hY : obj Y} {hZ : obj Z}
    (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z),
    Hom hX hY f ‚Üí Hom hY hZ g ‚Üí Hom hX hZ (f ‚â´ g)

instance SubCategory {cat : Category C} (S : SubCatStruct cat) :
  Category {x : C // S.obj x} where
  Hom  := fun ‚ü®X, hX‚ü© ‚ü®Y, hY‚ü© => {f : X ‚ü∂ Y // S.Hom hX hY f}
  id   := fun ‚ü®X, hX‚ü© => ‚ü®ùüô X, S.id hX‚ü©
  comp := fun ‚ü®f, hf‚ü© ‚ü®g, hg‚ü© => ‚ü®f ‚â´ g, S.comp f g hf hg‚ü©

def Œî [Category C] [Category J] (X : C) : J ‚•§ C where
  obj A := X
  map f := ùüô X

instance Types : Category Type where
  Hom a b  := a ‚Üí b
  id _     := id
  comp f g := g ‚àò f

instance : Coe (Type ‚Üí Prop) (Type 1) where
  coe œÜ := {A : Type // œÜ A}

instance Types.FullSub (œÜ : Type ‚Üí Prop) : Category ‚ÜëœÜ where
  Hom := fun ‚ü®X, _‚ü© ‚ü®Y, _‚ü© => X ‚Üí Y
  id _ := id
  comp := fun f g => g ‚àò f

@[ext]
theorem Types_ext {œÜ : Type ‚Üí Prop} {X Y : ‚ÜëœÜ}
    (f g : X ‚ü∂ Y) (h : ‚àÄ a : X.1, f a = g a) :
    f = g := by
  funext x
  exact h x

abbrev Types.SelfProd (œÜ : Type ‚Üí Prop) [Category ‚ÜëœÜ] :=
  ‚àÄ (A : ‚ÜëœÜ) (f : A.1 ‚Üí ‚ÜëœÜ),
  Limits.HasLimit (Discrete.functor f)

abbrev Types.SelfCoprod (œÜ : Type ‚Üí Prop) [Category ‚ÜëœÜ] :=
  ‚àÄ (A : ‚ÜëœÜ) (f : A.1 ‚Üí ‚ÜëœÜ),
  Limits.HasColimit (Discrete.functor f)

section propositional_logic

instance PropLogicStruct : SubCatStruct Types (C := Type) where
  obj X := X = Unit ‚à® X = Empty
  Hom hX hY f := True
  id h := True.intro
  comp f g := by simp_all

def PropLogic := SubCategory PropLogicStruct

#check PropLogic

def hE : PropLogicStruct.obj Empty := by simp [PropLogicStruct]
def hU : PropLogicStruct.obj Unit  := by simp [PropLogicStruct]

def imp : PropLogic.Hom ‚ü®Empty, hE‚ü© ‚ü®Unit, hU‚ü© :=
  let f : Types.Hom Empty Unit := fun _ => Unit.unit
  ‚ü®f, by simp_all [PropLogicStruct]‚ü©
